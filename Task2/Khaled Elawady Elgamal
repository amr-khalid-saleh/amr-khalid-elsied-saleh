conflicts_data = [
    ("C1", "C2", 3),
    ("C1", "C3", 2),
    ("C2", "C3", 1),
    ("C2", "C4", 4),
    ("C3", "C4", 2)
]

levels_data = [
    ("C1", "First"),
    ("C2", "Second"),
    ("C3", "Third"),
    ("C4", "First")
]

courses_per_level = {"First": 2, "Second": 2, "Third": 2}

patterns = [
    ["First", "Second", "Third"],
    ["Third", "First", "Second"]
]

def heapify(arr, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    if left < n and arr[left][2] > arr[largest][2]: 
        largest = left
    if right < n and arr[right][2] > arr[largest][2]:
        largest = right
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)

heap_sort(conflicts_data)

def calculate_cost(schedule, levels_data, conflicts_data):
    day_mapping = {}
    day = 1
    for level in schedule:
        courses_in_level = [course[0] for course in levels_data if course[1] == level]
        for course in courses_in_level:
            day_mapping[course] = day
        day += 1

    total_cost = 0
    for conflict in conflicts_data:
        course1_day = day_mapping[conflict[0]]
        course2_day = day_mapping[conflict[1]]
        if course1_day == course2_day:
            total_cost += conflict[2]

    return total_cost

best_pattern = None
min_cost = float('inf')

for pattern in patterns:
    cost = calculate_cost(pattern, levels_data, conflicts_data)
    if cost < min_cost:
        min_cost = cost
        best_pattern = pattern

print("Best Pattern:", best_pattern)
print("Minimum Cost:", min_cost)

#Khaled Elawady Elgamal
#section 2
